{"version":3,"sources":["components/ConfigurationIP/ConfigurationIP.jsx","components/ConfigurationIP/index.js","components/ConfigurationDNS/ConfigurationDNS.jsx","components/ConfigurationDNS/index.js","components/EthernetSettings/EthernetSetting.jsx","components/EthernetSettings/index.js","components/ConfigurationWifi/ConfigurationWifi.jsx","components/WirelessSettings/WirelessSetting.jsx","components/WirelessSettings/index.js","components/helpers/validation.js","App.jsx","components/helpers/submitFunction.js","index.js"],"names":["ConfigurationIP","disabled","handleChange","ethernet","values","setEthernetStateIpAddress","ethernetStateIpAddress","wirelessStateIpAddress","setWirelessStateIpAddress","errors","useState","ipSetting","setIpSetting","changeRadio","event","className","RadioGroup","name","value","FormControlLabel","control","Radio","onChange","target","defaultValue","label","TextField","helperText","required","id","ethernetIpAdress","wirelessIpAdress","ethernetSubnetMask","wirelessSubnetMask","ethernetDefaultGateway","wirelessDefaultGateway","ConfigurationDNS","ethernetStateDnsAddress","setEthernetStateDnsAddress","wirelessStateDnsAddress","setWirelessStateDnsAddress","dnsSetting","setDnsSetting","ethernetPreferredDnsAdress","wirelessPreferredDnsAdress","ethernetAlternativeDnsAdress","wirelessAlternativeDnsAdress","EthernetSetting","formik","FormControl","component","FormLabel","onSubmit","ConfigurationWifi","securityKeyEnable","setSecurityKeyEnable","wifiEnable","Select","wirelessNetworkName","MenuItem","FormHelperText","Checkbox","wirelessNetworkSecurity","WirelessSetting","setWifiEnable","handleWifiEnabled","style","padding","ipv4","subnetMask","dns","App","validationSchema","yup","shape","matches","useFormik","initialValues","actions","console","log","JSON","stringify","resetForm","submitFunction","type","onClick","handleSubmit","handleReset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.add5f8d7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Radio, RadioGroup, FormControlLabel, TextField } from \"@mui/material\";\r\n\r\nfunction ConfigurationIP({\r\n  disabled,\r\n  handleChange,\r\n  ethernet,\r\n  values,\r\n  setEthernetStateIpAddress,\r\n  ethernetStateIpAddress,\r\n  wirelessStateIpAddress,\r\n  setWirelessStateIpAddress,\r\n  errors,\r\n}) {\r\n  const [ipSetting, setIpSetting] = useState(\"DHCP\");\r\n  const changeRadio = (event) => {\r\n    setIpSetting(event);\r\n    event === \"DHCP\"\r\n      ? ethernet\r\n        ? setEthernetStateIpAddress(true)\r\n        : setWirelessStateIpAddress(true)\r\n      : ethernet\r\n      ? setEthernetStateIpAddress(false)\r\n      : setWirelessStateIpAddress(false);\r\n  };\r\n  return (\r\n    <div className=\"ip-container\">\r\n      <div className=\"radio-group\">\r\n        <RadioGroup\r\n          disabled={disabled}\r\n          aria-label=\"settings\"\r\n          name=\"controlled-radio-buttons-group\"\r\n          value={ipSetting}\r\n        >\r\n          <FormControlLabel\r\n            value=\"DHCP\"\r\n            control={<Radio />}\r\n            onChange={(event) => changeRadio(event.target.defaultValue)}\r\n            label=\"Obtain an IP address automatically (DHCP/BootP)\"\r\n          />\r\n          <FormControlLabel\r\n            value=\"IP\"\r\n            control={<Radio />}\r\n            onChange={(event) => changeRadio(event.target.defaultValue)}\r\n            label=\"Use the following IP adress:\"\r\n          />\r\n        </RadioGroup>\r\n      </div>\r\n      <div className=\"fields-group\">\r\n        <div className=\"field-container\">\r\n          <TextField\r\n            helperText=\"IP adress *\"\r\n            disabled={\r\n              ethernet ? ethernetStateIpAddress : wirelessStateIpAddress\r\n            }\r\n            required={true}\r\n            id={ethernet ? \"ethernetIpAdress\" : \"wirelessIpAdress\"}\r\n            value={ethernet ? values.ethernetIpAdress : values.wirelessIpAdress}\r\n            onChange={handleChange}\r\n          />\r\n          {\r\n            <div className=\"required\">\r\n              {ethernet\r\n                ? !ethernetStateIpAddress && errors?.ethernetIpAdress\r\n                : !wirelessStateIpAddress && errors?.wirelessIpAdress}\r\n            </div>\r\n          }\r\n        </div>\r\n        <div className=\"field-container\">\r\n          <TextField\r\n            helperText=\"Subnet Mask *\"\r\n            disabled={\r\n              ethernet ? ethernetStateIpAddress : wirelessStateIpAddress\r\n            }\r\n            required={true}\r\n            id={ethernet ? \"ethernetSubnetMask\" : \"wirelessSubnetMask\"}\r\n            value={\r\n              ethernet ? values.ethernetSubnetMask : values.wirelessSubnetMask\r\n            }\r\n            onChange={handleChange}\r\n          />\r\n          {\r\n            <div className=\"required\">\r\n              {ethernet\r\n                ? !ethernetStateIpAddress && errors?.ethernetSubnetMask\r\n                : !wirelessStateIpAddress && errors?.wirelessSubnetMask}\r\n            </div>\r\n          }\r\n        </div>\r\n        <div className=\"field-container\">\r\n          <TextField\r\n            helperText=\"Default Gateway\"\r\n            disabled={\r\n              ethernet ? ethernetStateIpAddress : wirelessStateIpAddress\r\n            }\r\n            id={ethernet ? \"ethernetDefaultGateway\" : \"wirelessDefaultGateway\"}\r\n            value={\r\n              ethernet\r\n                ? values.ethernetDefaultGateway\r\n                : values.wirelessDefaultGateway\r\n            }\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConfigurationIP;\r\n","import ConfigurationIP from \"./ConfigurationIP\";\r\nexport default ConfigurationIP","import React, { useState } from \"react\";\r\nimport { Radio, RadioGroup, FormControlLabel, TextField } from \"@mui/material\";\r\n\r\nfunction ConfigurationDNS({\r\n  handleChange,\r\n  ethernet,\r\n  values,\r\n  ethernetStateDnsAddress,\r\n  setEthernetStateDnsAddress,\r\n  wirelessStateDnsAddress,\r\n  setWirelessStateDnsAddress,\r\n  errors,\r\n}) {\r\n  const [dnsSetting, setDnsSetting] = useState(\"automatically\");\r\n  const changeRadio = (event) => {\r\n    setDnsSetting(event);\r\n    event === \"automatically\"\r\n      ? ethernet\r\n        ? setEthernetStateDnsAddress(true)\r\n        : setWirelessStateDnsAddress(true)\r\n      : ethernet\r\n      ? setEthernetStateDnsAddress(false)\r\n      : setWirelessStateDnsAddress(false);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"radio-group\">\r\n        <RadioGroup\r\n          aria-label=\"settings\"\r\n          name=\"controlled-radio-buttons-group\"\r\n          value={dnsSetting}\r\n        >\r\n          <FormControlLabel\r\n            value=\"automatically\"\r\n            control={<Radio />}\r\n            onChange={(event) => changeRadio(event.target.defaultValue)}\r\n            label=\"Obtain DNS server address automatically\"\r\n          />\r\n          <FormControlLabel\r\n            value=\"DS\"\r\n            control={<Radio />}\r\n            onChange={(event) => changeRadio(event.target.defaultValue)}\r\n            label=\"Use the following DS server adress:\"\r\n          />\r\n        </RadioGroup>\r\n      </div>\r\n      <div className=\"fields-group\">\r\n        <div className=\"field-container\">\r\n          <TextField\r\n            helperText=\"Preferred DNS server *\"\r\n            disabled={\r\n              ethernet ? ethernetStateDnsAddress : wirelessStateDnsAddress\r\n            }\r\n            required={true}\r\n            id={\r\n              ethernet\r\n                ? \"ethernetPreferredDnsAdress\"\r\n                : \"wirelessPreferredDnsAdress\"\r\n            }\r\n            value={\r\n              ethernet\r\n                ? values.ethernetPreferredDnsAdress\r\n                : values.wirelessPreferredDnsAdress\r\n            }\r\n            onChange={handleChange}\r\n          />\r\n          <div className=\"required\">\r\n            {ethernet\r\n              ? !ethernetStateDnsAddress && errors?.ethernetPreferredDnsAdress\r\n              : !wirelessStateDnsAddress && errors?.wirelessPreferredDnsAdress}\r\n          </div>\r\n        </div>\r\n        <div className=\"field-container\">\r\n          <TextField\r\n            helperText=\"Alternative DNS server \"\r\n            disabled={\r\n              ethernet ? ethernetStateDnsAddress : wirelessStateDnsAddress\r\n            }\r\n            id={\r\n              ethernet\r\n                ? \"ethernetAlternativeDnsAdress\"\r\n                : \"wirelessAlternativeDnsAdress\"\r\n            }\r\n            value={\r\n              ethernet\r\n                ? values.ethernetAlternativeDnsAdress\r\n                : values.wirelessAlternativeDnsAdress\r\n            }\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ConfigurationDNS;\r\n","import ConfigurationDNS from \"./ConfigurationDNS\";\r\n\r\nexport default ConfigurationDNS","import React from \"react\";\r\nimport { FormLabel } from \"@mui/material\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport ConfigurationIP from \"../ConfigurationIP\";\r\nimport ConfigurationDNS from \"../ConfigurationDNS\";\r\nfunction EthernetSetting({\r\n  formik,\r\n  setEthernetStateIpAddress,\r\n  ethernetStateIpAddress,\r\n  ethernetStateDnsAddress,\r\n  setEthernetStateDnsAddress,\r\n}) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <FormControl component=\"fieldset\">\r\n        <FormLabel component=\"legend\">Ethernet Settings</FormLabel>\r\n        <ConfigurationIP\r\n          handleChange={formik.handleChange}\r\n          onSubmit={formik.onSubmit}\r\n          values={formik.values}\r\n          ethernet={true}\r\n          ethernetStateIpAddress={ethernetStateIpAddress}\r\n          setEthernetStateIpAddress={setEthernetStateIpAddress}\r\n          errors={formik.errors}\r\n        />\r\n        <ConfigurationDNS\r\n          handleChange={formik.handleChange}\r\n          values={formik.values}\r\n          ethernet={true}\r\n          setEthernetStateDnsAddress={setEthernetStateDnsAddress}\r\n          ethernetStateDnsAddress={ethernetStateDnsAddress}\r\n          errors={formik.errors}\r\n        />\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EthernetSetting;\r\n","import EthernetSetting from \"./EthernetSetting\";\r\n\r\n\r\n\r\nexport default EthernetSetting","import React from \"react\";\r\nimport { FormControlLabel } from \"@mui/material\";\r\nimport {\r\n  Checkbox,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n} from \"@mui/material\";\r\nfunction ConfigurationWifi({\r\n  handleChange,\r\n  values,\r\n  securityKeyEnable,\r\n  setSecurityKeyEnable,\r\n  errors,\r\n  wifiEnable\r\n}) {\r\n  return (\r\n    <>\r\n      <div className=\"field-container-wireless\">\r\n        <Select\r\n          className=\"wifi-select\"\r\n          name={\"wirelessNetworkName\"}\r\n          value={values.wirelessNetworkName}\r\n          onChange={handleChange}\r\n        >\r\n          <MenuItem value={\"Cisco\"}>Cisco</MenuItem>\r\n          <MenuItem value={\"Huawei\"}>Huawei</MenuItem>\r\n          <MenuItem value={\"HomeNetwork\"}>HomeNetwork</MenuItem>\r\n        </Select>\r\n        <FormHelperText>Wireless Network Name *</FormHelperText>\r\n        <div className=\"required\">{!wifiEnable && errors.wirelessNetworkName}</div>\r\n      </div>\r\n      <FormControlLabel\r\n        onChange={() => setSecurityKeyEnable(!securityKeyEnable)}\r\n        control={<Checkbox />}\r\n        label=\"Enable Wireless Security:\"\r\n      />\r\n      <div className=\"fields-group\">\r\n        <div className=\"field-container\">\r\n          <TextField\r\n            helperText=\"Security Key *\"\r\n            disabled={securityKeyEnable}\r\n            name={\"wirelessNetworkSecurity\"}\r\n            value={values.wirelessNetworkSecurity}\r\n            onChange={handleChange}\r\n          />\r\n          <div className=\"required\">{!securityKeyEnable && errors.wirelessNetworkSecurity}</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ConfigurationWifi;\r\n","import React from \"react\";\r\nimport { FormLabel, FormControlLabel, Checkbox } from \"@mui/material\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport ConfigurationIP from \"../ConfigurationIP\";\r\nimport ConfigurationDNS from \"../ConfigurationDNS\";\r\nimport ConfigurationWifi from \"../ConfigurationWifi/ConfigurationWifi\";\r\nfunction WirelessSetting({\r\n  formik,\r\n  wirelessStateIpAddress,\r\n  setWirelessStateIpAddress,\r\n  wirelessStateDnsAddress,\r\n  setWirelessStateDnsAddress,\r\n  wifiEnable,\r\n  setWifiEnable,\r\n  securityKeyEnable,\r\n  setSecurityKeyEnable,\r\n}) {\r\n  const handleWifiEnabled = () => {\r\n    setWifiEnable(!wifiEnable);\r\n    setSecurityKeyEnable(true);\r\n    setWirelessStateIpAddress(true);\r\n    setWirelessStateDnsAddress(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      <FormControl component=\"fieldset\">\r\n        <FormLabel component=\"legend\">Wireless Settings</FormLabel>\r\n        <div className=\"wireless-checkbox\" style={{ padding: \"0 0 30px 0\" }}>\r\n          <FormControlLabel\r\n            value={wifiEnable}\r\n            control={<Checkbox />}\r\n            label=\"Enable wifi:\"\r\n            onChange={() => handleWifiEnabled()}\r\n          />\r\n        </div>\r\n        <FormControl disabled={wifiEnable}>\r\n          <ConfigurationWifi\r\n            handleChange={formik.handleChange}\r\n            values={formik.values}\r\n            securityKeyEnable={securityKeyEnable}\r\n            setSecurityKeyEnable={setSecurityKeyEnable}\r\n            errors={formik.errors}\r\n            wifiEnable={wifiEnable}\r\n          />\r\n          <ConfigurationIP\r\n            handleChange={formik.handleChange}\r\n            values={formik.values}\r\n            ethernet={false}\r\n            wirelessStateIpAddress={wirelessStateIpAddress}\r\n            setWirelessStateIpAddress={setWirelessStateIpAddress}\r\n            errors={formik.errors}\r\n            handleWifiEnabled={handleWifiEnabled}\r\n          />\r\n          <ConfigurationDNS\r\n            handleChange={formik.handleChange}\r\n            values={formik.values}\r\n            ethernet={false}\r\n            wirelessStateDnsAddress={wirelessStateDnsAddress}\r\n            setWirelessStateDnsAddress={setWirelessStateDnsAddress}\r\n            errors={formik.errors}\r\n            handleWifiEnabled={handleWifiEnabled}\r\n          />\r\n        </FormControl>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WirelessSetting;\r\n","import WirelessSetting from \"./WirelessSetting\";\r\n\r\nexport default WirelessSetting","export const ipv4 =\r\n  /\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/;\r\n\r\nexport const subnetMask =\r\n  /^(((255\\.){3}(255|254|252|248|240|224|192|128|0+))|((255\\.){2}(255|254|252|248|240|224|192|128|0+)\\.0)|((255\\.)(255|254|252|248|240|224|192|128|0+)(\\.0+){2})|((255|254|252|248|240|224|192|128|0+)(\\.0+){3}))$/;\r\n\r\nexport const dns =\r\n  /^((([01]?[0-9]{1,2})|(2[0-4][0-9])|(25[0-5]))[.]){3}(([0-1]?[0-9]{1,2})|(2[0-4][0-9])|(25[0-5]))$/;\r\n","import React, { useState } from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport EthernetSetting from \"./components/EthernetSettings\";\r\nimport WirelessSetting from \"./components/WirelessSettings\";\r\nimport { ipv4, subnetMask, dns } from \"./components/helpers/validation\";\r\nimport { submitFunction } from \"./components/helpers/submitFunction\";\r\nimport \"./styles.scss\";\r\n\r\nfunction App() {\r\n  const [wifiEnable, setWifiEnable] = useState(true);\r\n  const [securityKeyEnable, setSecurityKeyEnable] = useState(true);\r\n  const [ethernetStateIpAddress, setEthernetStateIpAddress] = useState(true);\r\n  const [ethernetStateDnsAddress, setEthernetStateDnsAddress] = useState(true);\r\n  const [wirelessStateDnsAddress, setWirelessStateDnsAddress] = useState(true);\r\n  const [wirelessStateIpAddress, setWirelessStateIpAddress] = useState(true);\r\n  const validationSchema = yup.object().shape({\r\n    ethernetIpAdress: !ethernetStateIpAddress\r\n      ? yup\r\n          .string()\r\n          .required(\"Required files\")\r\n          .matches(ipv4, \"Incorrect IP address\")\r\n      : null,\r\n    wirelessIpAdress: !wirelessStateIpAddress\r\n      ? yup\r\n          .string()\r\n          .required(\"Required files\")\r\n          .matches(ipv4, \"Incorrect IP address\")\r\n      : null,\r\n    ethernetSubnetMask: !ethernetStateIpAddress\r\n      ? yup\r\n          .string()\r\n          .required(\"Required files\")\r\n          .matches(subnetMask, \"Incorrect Subnet Mask address\")\r\n      : null,\r\n    wirelessSubnetMask: !wirelessStateIpAddress\r\n      ? yup\r\n          .string()\r\n          .required(\"Required files\")\r\n          .matches(subnetMask, \"Incorrect Subnet Mask address\")\r\n      : null,\r\n    ethernetPreferredDnsAdress: !ethernetStateDnsAddress\r\n      ? yup\r\n          .string()\r\n          .required(\"Required files\")\r\n          .matches(dns, \"Incorrect DNS address\")\r\n      : null,\r\n    wirelessPreferredDnsAdress: !wirelessStateDnsAddress\r\n      ? yup\r\n          .string()\r\n          .required(\"Required files\")\r\n          .matches(dns, \"Incorrect DNS address\")\r\n      : null,\r\n    wirelessNetworkName: !wifiEnable\r\n      ? yup.string().required(\"Select Network Name\")\r\n      : null,\r\n    wirelessNetworkSecurity: !securityKeyEnable\r\n      ? yup.string().required(\"Key is required\")\r\n      : null,\r\n  });\r\n  \r\n  const formik = useFormik({\r\n    initialValues: {\r\n      ethernetIpAdress: \"\",\r\n      ethernetSubnetMask: \"\",\r\n      ethernetDefaultGateway: \"\",\r\n      ethernetPreferredDnsAdress: \"\",\r\n      ethernetAlternativeDnsAdress: \"\",\r\n      wirelessNetworkName: \"\",\r\n      wirelessNetworkSecurity: \"\",\r\n      wirelessIpAdress: \"\",\r\n      wirelessSubnetMask: \"\",\r\n      wirelessDefaultGateway: \"\",\r\n      wirelessPreferredDnsAdress: \"\",\r\n      wirelessAlternativeDnsAdress: \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values, actions) => {\r\n      submitFunction({\r\n        values,\r\n        wifiEnable,\r\n        actions,\r\n        wirelessStateDnsAddress,\r\n        wirelessStateIpAddress,\r\n        ethernetStateDnsAddress,\r\n        ethernetStateIpAddress,\r\n      });\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className=\"wrapper-container\">\r\n      <div className=\"container-form\">\r\n        <div className=\"container-content\">\r\n          <EthernetSetting\r\n            formik={formik}\r\n            ethernetStateIpAddress={ethernetStateIpAddress}\r\n            ethernetStateDnsAddress={ethernetStateDnsAddress}\r\n            setEthernetStateIpAddress={setEthernetStateIpAddress}\r\n            setEthernetStateDnsAddress={setEthernetStateDnsAddress}\r\n          />\r\n          <WirelessSetting\r\n            formik={formik}\r\n            wirelessStateIpAddress={wirelessStateIpAddress}\r\n            setWirelessStateIpAddress={setWirelessStateIpAddress}\r\n            wirelessStateDnsAddress={wirelessStateDnsAddress}\r\n            setWirelessStateDnsAddress={setWirelessStateDnsAddress}\r\n            wifiEnable={wifiEnable}\r\n            setWifiEnable={setWifiEnable}\r\n            securityKeyEnable={securityKeyEnable}\r\n            setSecurityKeyEnable={setSecurityKeyEnable}\r\n          />\r\n        </div>\r\n        <div className=\"btns\">\r\n          <button\r\n            type=\"submit\"\r\n            onClick={(values) => formik.handleSubmit(values)}\r\n            className=\"submit\"\r\n          >\r\n            Save\r\n          </button>\r\n          <button onClick={() => formik.handleReset()} className=\"cancel\">\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const submitFunction = ({\r\n  wifiEnable,\r\n  values,\r\n  actions,\r\n  wirelessStateDnsAddress,\r\n  wirelessStateIpAddress,\r\n  ethernetStateDnsAddress,\r\n  ethernetStateIpAddress,\r\n  securityKeyEnable,\r\n}) => {\r\n  if (wifiEnable) {\r\n    console.log(\r\n      JSON.stringify({\r\n        ethernetIpAdress:\r\n          values.ethernetIpAdress && !ethernetStateIpAddress\r\n            ? values.ethernetIpAdress\r\n            : \"DHCP/BootP\",\r\n        ethernetSubnetMask:\r\n          values.ethernetSubnetMask && !ethernetStateIpAddress\r\n            ? values.ethernetSubnetMask\r\n            : \"DHCP/BootP\",\r\n        ethernetDefaultGateway:\r\n          values.ethernetDefaultGateway && !ethernetStateIpAddress\r\n            ? values.ethernetDefaultGateway\r\n            : \"DHCP/BootP\",\r\n        ethernetPreferredDnsAdress:\r\n          values.ethernetPreferredDnsAdress && !ethernetStateDnsAddress\r\n            ? values.ethernetPreferredDnsAdress\r\n            : \"DHCP/BootP\",\r\n        ethernetAlternativeDnsAdress:\r\n          values.ethernetAlternativeDnsAdress && !ethernetStateDnsAddress\r\n            ? values.ethernetAlternativeDnsAdress\r\n            : \"DHCP/BootP\",\r\n      })\r\n    );\r\n    actions.resetForm({\r\n      values: {\r\n        ethernetIpAdress: \"\",\r\n        ethernetSubnetMask: \"\",\r\n        ethernetDefaultGateway: \"\",\r\n        ethernetPreferredDnsAdress: \"\",\r\n        ethernetAlternativeDnsAdress: \"\",\r\n        wirelessNetworkName: \"\",\r\n        wirelessNetworkSecurity: \"\",\r\n        wirelessIpAdress: \"\",\r\n        wirelessSubnetMask: \"\",\r\n        wirelessDefaultGateway: \"\",\r\n        wirelessPreferredDnsAdress: \"\",\r\n        wirelessAlternativeDnsAdress: \"\",\r\n      },\r\n    });\r\n  } else {\r\n    console.log(\r\n      JSON.stringify({\r\n        ethernetIpAdress:\r\n          values.ethernetIpAdress && !ethernetStateIpAddress\r\n            ? values.ethernetIpAdress\r\n            : \"DHCP/BootP\",\r\n        ethernetSubnetMask:\r\n          values.ethernetSubnetMask && !ethernetStateIpAddress\r\n            ? values.ethernetSubnetMask\r\n            : \"DHCP/BootP\",\r\n        ethernetDefaultGateway:\r\n          values.ethernetDefaultGateway && !ethernetStateIpAddress\r\n            ? values.ethernetDefaultGateway\r\n            : \"DHCP/BootP\",\r\n        ethernetPreferredDnsAdress:\r\n          values.ethernetPreferredDnsAdress && !ethernetStateDnsAddress\r\n            ? values.ethernetPreferredDnsAdress\r\n            : \"DHCP/BootP\",\r\n        ethernetAlternativeDnsAdress:\r\n          values.ethernetAlternativeDnsAdress && !ethernetStateDnsAddress\r\n            ? values.ethernetAlternativeDnsAdress\r\n            : \"DHCP/BootP\",\r\n        wirelessNetworkName: values.wirelessNetworkName\r\n          ? values.wirelessNetworkName\r\n          : \"DHCP/BootP\",\r\n        wirelessNetworkSecurity:\r\n          values.wirelessNetworkSecurity && !securityKeyEnable\r\n            ? values.wirelessNetworkSecurity\r\n            : \"DHCP/BootP\",\r\n        wirelessIpAdress:\r\n          values.wirelessIpAdress && !wirelessStateIpAddress\r\n            ? values.wirelessIpAdress\r\n            : \"DHCP/BootP\",\r\n        wirelessSubnetMask:\r\n          values.wirelessSubnetMask && !wirelessStateIpAddress\r\n            ? values.wirelessSubnetMask\r\n            : \"DHCP/BootP\",\r\n        wirelessDefaultGateway:\r\n          values.wirelessDefaultGateway && !wirelessStateIpAddress\r\n            ? values.wirelessDefaultGateway\r\n            : \"DHCP/BootP\",\r\n        wirelessPreferredDnsAdress:\r\n          values.wirelessPreferredDnsAdress && !wirelessStateDnsAddress\r\n            ? values.wirelessPreferredDnsAdress\r\n            : \"DHCP/BootP\",\r\n        wirelessAlternativeDnsAdress:\r\n          values.wirelessAlternativeDnsAdress && !wirelessStateDnsAddress\r\n            ? values.wirelessAlternativeDnsAdress\r\n            : \"DHCP/BootP\",\r\n      })\r\n    );\r\n    actions.resetForm({\r\n      values: {\r\n        ethernetIpAdress: \"\",\r\n        ethernetSubnetMask: \"\",\r\n        ethernetDefaultGateway: \"\",\r\n        ethernetPreferredDnsAdress: \"\",\r\n        ethernetAlternativeDnsAdress: \"\",\r\n        wirelessNetworkName: \"\",\r\n        wirelessNetworkSecurity: \"\",\r\n        wirelessIpAdress: \"\",\r\n        wirelessSubnetMask: \"\",\r\n        wirelessDefaultGateway: \"\",\r\n        wirelessPreferredDnsAdress: \"\",\r\n        wirelessAlternativeDnsAdress: \"\",\r\n      },\r\n    });\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App.jsx\";\r\nimport \"./styles.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}